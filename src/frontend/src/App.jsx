import React, { useState, useEffect, useRef } from 'react';
import {
  createOrder,
  topUp,
  getBalance,
  getOrders
} from './api';
import { connectOrderStatus } from './OrderStatusSignalR';
import './App.css';

function generateGuid() {
  let guid = ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  );
  return guid;
}

function isGuid(str) {
  return /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/.test(str);
}

const StatusBadge = ({ status }) => (
  <span className={
    status === 'FINISHED' ? 'badge badge-success' :
    status === 'CANCELLED' ? 'badge badge-fail' :
    'badge badge-pending'
  }>{status}</span>
);

const Loader = () => <span className="loader" />;

const Toast = ({ message, type, onClose }) => (
  <div className={`toast ${type}`}>{message}<button className="toast-close" onClick={onClose}>√ó</button></div>
);

function App() {
  const [userId, setUserId] = useState('');
  const [amount, setAmount] = useState(100);
  const [description, setDescription] = useState('–¢–æ–≤–∞—Ä');
  const [balance, setBalance] = useState(null);
  const [orders, setOrders] = useState([]);
  const [statusUpdates, setStatusUpdates] = useState([]);
  const [connection, setConnection] = useState(null);
  const [loading, setLoading] = useState(false);
  const [btnLoading, setBtnLoading] = useState({});
  const [toast, setToast] = useState(null);
  const userIdRef = useRef();

  useEffect(() => { userIdRef.current && userIdRef.current.focus(); }, []);

  useEffect(() => {
    if (!isGuid(userId)) {
      const guid = generateGuid();
      setUserId(guid);
    }
  }, []);

  const refresh = async (uid = userId) => {
    setLoading(true);
    if (!isGuid(uid)) {
      setToast({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π userId! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç –∑–∞–Ω–æ–≤–æ.', type: 'info' });
      setLoading(false);
      return;
    }
    console.log('Refresh userId:', uid);
    try {
      const bRes = await fetch(`http://localhost:8080/payments/api/Accounts/balance/${uid}`);
      if (bRes.status === 404) {
        setBalance(null);
        setOrders([]);
        setToast({ message: '–°—á—ë—Ç –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω, –Ω–∞–∂–º–∏—Ç–µ \'–°–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç\'', type: 'info' });
        setLoading(false);
        return;
      }
      if (!bRes.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
      const b = await bRes.json();
      setBalance(b.balance);
      const oRes = await fetch(`http://localhost:8080/orders/api/Orders?userId=${uid}`);
      if (oRes.status === 404) {
        setOrders([]);
        setLoading(false);
        return;
      }
      if (!oRes.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤');
      setOrders(await oRes.json());
    } catch (e) {
      setToast({ message: e.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö', type: 'error' });
    }
    setLoading(false);
  };

  useEffect(() => {
    if (!userId) return;
    refresh(userId);
    if (connection) connection.stop();
    const conn = connectOrderStatus(userId, (msg) => {
      setStatusUpdates(upds => [msg, ...upds]);
      refresh(userId);
    });
    setConnection(conn);
    return () => conn && conn.stop();
  }, [userId]);

  useEffect(() => {
    if (toast) {
      const t = setTimeout(() => setToast(null), 3000);
      return () => clearTimeout(t);
    }
  }, [toast]);

  const handleCopyUserId = () => {
    navigator.clipboard.writeText(userId);
    setToast({ message: 'User ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', type: 'success' });
  };

  const handleCreateAccount = async () => {
    setBtnLoading(l => ({ ...l, create: true }));
    const newGuid = generateGuid();
    setUserId(newGuid);
    if (!isGuid(newGuid)) {
      setToast({ message: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ userId! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.', type: 'error' });
      setBtnLoading(l => ({ ...l, create: false }));
      return;
    }
    console.log('CreateAccount userId:', newGuid);
    try {
      const res = await fetch('http://localhost:8080/payments/api/Accounts/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: newGuid })
      });
      if (res.ok) {
        setToast({ message: '–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', type: 'success' });
        refresh(newGuid);
      } else {
        let msg = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞';
        try {
          const data = await res.json();
          msg = data?.errors?.[0] || data?.message || msg;
        } catch (e) {
          const text = await res.text();
          if (text) msg = text;
        }
        setToast({ message: msg, type: 'error' });
      }
    } catch (e) {
      setToast({ message: e.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞', type: 'error' });
    }
    setBtnLoading(l => ({ ...l, create: false }));
  };

  const handleTopUp = async () => {
    setBtnLoading(l => ({ ...l, topup: true }));
    try {
      await topUp(userId, amount);
      setToast({ message: '–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!', type: 'success' });
      refresh();
    } catch (e) {
      setToast({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏', type: 'error' });
    }
    setBtnLoading(l => ({ ...l, topup: false }));
  };

  const handleCreateOrder = async () => {
    setBtnLoading(l => ({ ...l, order: true }));
    try {
      await createOrder(userId, amount, description);
      setToast({ message: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!', type: 'success' });
      refresh();
    } catch (e) {
      setToast({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞', type: 'error' });
    }
    setBtnLoading(l => ({ ...l, order: false }));
  };

  return (
    <div className="main-container modern-ui">
      <h2>–ú–∞–≥–∞–∑–∏–Ω <span className="subtitle">(–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã, SignalR)</span></h2>
      <div className="block">
        <label htmlFor="userId">User ID:</label>
        <div className="user-id-row">
          <input ref={userIdRef} id="userId" value={userId} readOnly className="input" autoComplete="off" />
          <button className="btn icon-btn" title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å" onClick={handleCopyUserId}>
            <span role="img" aria-label="copy">üìã</span>
          </button>
        </div>
        <div className="input-hint">–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (GUID).<br/>–ü—Ä–∏–º–µ—Ä: <span style={{fontFamily:'monospace'}}>b1a7e2c3-4d5f-6789-abcd-1234567890ef</span></div>
        <button onClick={handleCreateAccount} disabled={btnLoading.create} className="btn primary">
          {btnLoading.create ? <Loader /> : <><span role="img" aria-label="plus">‚ûï</span> –°–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç (–Ω–æ–≤—ã–π User ID)</>}
        </button>
      </div>
      <div className="block">
        <div className="balance-row">
          <span>–ë–∞–ª–∞–Ω—Å: <b>{balance !== null ? balance : <Loader />}</b></span>
          <button onClick={() => refresh()} disabled={loading} className="btn icon-btn" title="–û–±–Ω–æ–≤–∏—Ç—å">
            <span role="img" aria-label="refresh">üîÑ</span>
          </button>
        </div>
      </div>
      <div className="block">
        <label>–°—É–º–º–∞:
          <input type="number" value={amount} min={1} max={1000000} onChange={e => setAmount(Number(e.target.value))} className="input" placeholder="–°—É–º–º–∞" />
        </label>
        <button onClick={handleTopUp} disabled={btnLoading.topup} className="btn primary">
          {btnLoading.topup ? <Loader /> : <><span role="img" aria-label="plus">üí∏</span> –ü–æ–ø–æ–ª–Ω–∏—Ç—å</>}
        </button>
      </div>
      <div className="block">
        <label>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:
          <input value={description} onChange={e => setDescription(e.target.value)} placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞" className="input" />
        </label>
        <button onClick={handleCreateOrder} disabled={btnLoading.order} className="btn primary">
          {btnLoading.order ? <Loader /> : <><span role="img" aria-label="cart">üõí</span> –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑</>}
        </button>
      </div>
      <div className="block">
        <h4>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</h4>
        <button onClick={() => refresh()} disabled={loading} className="btn icon-btn" title="–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑—ã">
          <span role="img" aria-label="refresh">üîÑ</span>
        </button>
        <table className="orders-table">
          <thead>
            <tr><th>–û–ø–∏—Å–∞–Ω–∏–µ</th><th>–°—É–º–º–∞</th><th>–°—Ç–∞—Ç—É—Å</th></tr>
          </thead>
          <tbody>
            {orders.length === 0 ? (
              <tr><td colSpan={3} style={{ textAlign: 'center', color: '#b0b0b0' }}>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</td></tr>
            ) : orders.map(o => (
              <tr key={o.id}>
                <td>{o.description}</td>
                <td>{o.amount}</td>
                <td><StatusBadge status={o.status} /></td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <div className="block">
        <h4>Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
        <ul className="push-list">
          {statusUpdates.length === 0 ? (
            <li style={{ color: '#b0b0b0' }}>–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</li>
          ) : statusUpdates.map((u, i) => (
            <li key={i}><b>–ó–∞–∫–∞–∑ {u.orderId}:</b> <StatusBadge status={u.status} /></li>
          ))}
        </ul>
      </div>
      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}
      {loading && <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>}
    </div>
  );
}

export default App;