version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - backend

  postgres-orders:
    image: postgres:15
    environment:
      POSTGRES_DB: ordersdb
      POSTGRES_USER: ordersuser
      POSTGRES_PASSWORD: orderspass
    ports:
      - '5433:5432'
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ordersuser -d ordersdb"]
      interval: 5s
      timeout: 5s
      retries: 10

  postgres-payments:
    image: postgres:15
    environment:
      POSTGRES_DB: paymentsdb
      POSTGRES_USER: paymentsuser
      POSTGRES_PASSWORD: paymentspass
    ports:
      - '5434:5432'
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U paymentsuser -d paymentsdb"]
      interval: 5s
      timeout: 5s
      retries: 10

  api-gateway:
    build: ./src/api-gateway
    depends_on:
      - order-service
      - payments-service
    environment:
      ASPNETCORE_URLS: http://+:80
    ports:
      - '8080:80'
    networks:
      - backend

  order-service:
    build:
      context: .
      dockerfile: src/order-service/Dockerfile
    depends_on:
      postgres-orders:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      ASPNETCORE_URLS: http://+:80
      ConnectionStrings__OrdersDb: Host=postgres-orders;Database=ordersdb;Username=ordersuser;Password=orderspass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - '5101:80'
    networks:
      - backend

  payments-service:
    build:
      context: .
      dockerfile: src/payments-service/Dockerfile
    depends_on:
      postgres-payments:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      ASPNETCORE_URLS: http://+:80
      ConnectionStrings__PaymentsDb: Host=postgres-payments;Database=paymentsdb;Username=paymentsuser;Password=paymentspass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - '5102:80'
    networks:
      - backend

  frontend:
    build: ./src/frontend
    depends_on:
      - api-gateway
    ports:
      - '8081:80'
    networks:
      - backend

networks:
  backend:
    driver: bridge 